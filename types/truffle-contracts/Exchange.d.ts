/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface ExchangeContract extends Truffle.Contract<ExchangeInstance> {
  "new"(
    _feeAccount: string,
    _feePercent: number | BN | string,
    meta?: Truffle.TransactionDetails
  ): Promise<ExchangeInstance>;
}

export interface CancelOrder {
  name: "CancelOrder";
  args: {
    id: BN;
    timestamp: BN;
    account: string;
    sellToken: string;
    sellAmount: BN;
    buyToken: string;
    buyAmount: BN;
    0: BN;
    1: BN;
    2: string;
    3: string;
    4: BN;
    5: string;
    6: BN;
  };
}

export interface CreateOrder {
  name: "CreateOrder";
  args: {
    id: BN;
    timestamp: BN;
    account: string;
    sellToken: string;
    sellAmount: BN;
    buyToken: string;
    buyAmount: BN;
    0: BN;
    1: BN;
    2: string;
    3: string;
    4: BN;
    5: string;
    6: BN;
  };
}

export interface DepositEther {
  name: "DepositEther";
  args: {
    account: string;
    amount: BN;
    newBalance: BN;
    0: string;
    1: BN;
    2: BN;
  };
}

export interface DepositToken {
  name: "DepositToken";
  args: {
    account: string;
    token: string;
    amount: BN;
    newBalance: BN;
    0: string;
    1: string;
    2: BN;
    3: BN;
  };
}

export interface Trade {
  name: "Trade";
  args: {
    timestamp: BN;
    orderId: BN;
    sellAccount: string;
    sellToken: string;
    sellAmount: BN;
    buyAccount: string;
    buyToken: string;
    buyAmount: BN;
    0: BN;
    1: BN;
    2: string;
    3: string;
    4: BN;
    5: string;
    6: string;
    7: BN;
  };
}

export interface WithdrawEther {
  name: "WithdrawEther";
  args: {
    account: string;
    amount: BN;
    newBalance: BN;
    0: string;
    1: BN;
    2: BN;
  };
}

export interface WithdrawToken {
  name: "WithdrawToken";
  args: {
    account: string;
    token: string;
    amount: BN;
    newBalance: BN;
    0: string;
    1: string;
    2: BN;
    3: BN;
  };
}

type AllEvents =
  | CancelOrder
  | CreateOrder
  | DepositEther
  | DepositToken
  | Trade
  | WithdrawEther
  | WithdrawToken;

export interface ExchangeInstance extends Truffle.ContractInstance {
  ethBalanceOf(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  feeAccount(txDetails?: Truffle.TransactionDetails): Promise<string>;

  feePercent(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  orders(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    0: BN;
    1: BN;
    2: BN;
    3: string;
    4: string;
    5: BN;
    6: string;
    7: BN;
  }>;

  tokenBalanceOf(
    arg0: string,
    arg1: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  depositEther: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  depositToken: {
    (
      _token: string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _token: string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _token: string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _token: string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdrawEther: {
    (
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdrawToken: {
    (
      _token: string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _token: string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _token: string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _token: string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  createOrder: {
    (
      _sellToken: string,
      _sellAmount: number | BN | string,
      _buyToken: string,
      _buyAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _sellToken: string,
      _sellAmount: number | BN | string,
      _buyToken: string,
      _buyAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _sellToken: string,
      _sellAmount: number | BN | string,
      _buyToken: string,
      _buyAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _sellToken: string,
      _sellAmount: number | BN | string,
      _buyToken: string,
      _buyAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  cancelOrder: {
    (
      _id: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _id: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _id: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _id: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  fillOrder: {
    (
      _id: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _id: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _id: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _id: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    ethBalanceOf(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    feeAccount(txDetails?: Truffle.TransactionDetails): Promise<string>;

    feePercent(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    orders(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      0: BN;
      1: BN;
      2: BN;
      3: string;
      4: string;
      5: BN;
      6: string;
      7: BN;
    }>;

    tokenBalanceOf(
      arg0: string,
      arg1: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    depositEther: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    depositToken: {
      (
        _token: string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _token: string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _token: string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _token: string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    withdrawEther: {
      (
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    withdrawToken: {
      (
        _token: string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _token: string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _token: string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _token: string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    createOrder: {
      (
        _sellToken: string,
        _sellAmount: number | BN | string,
        _buyToken: string,
        _buyAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _sellToken: string,
        _sellAmount: number | BN | string,
        _buyToken: string,
        _buyAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _sellToken: string,
        _sellAmount: number | BN | string,
        _buyToken: string,
        _buyAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _sellToken: string,
        _sellAmount: number | BN | string,
        _buyToken: string,
        _buyAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    cancelOrder: {
      (
        _id: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _id: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _id: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _id: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    fillOrder: {
      (
        _id: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _id: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _id: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _id: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
